{"name":"Tunlr Clone","tagline":"Use a cheap VPS to make a Tunlr Clone","body":"#Tunlr Clone#\r\nTo build a tunlr or UnoTelly or unblock-us.com (or other DNS-based\r\nservices) clone on the cheap, you need to invest in a VPS.  For the\r\npurposes of this discussion, I am assuming that you will be using\r\nthis for watching US geo-locked content.\r\n\r\n##US IP Address##\r\nYour VPS provider must provide you with a US IP address\r\n\r\n##VPS Provider Specific Terminology##\r\nMy VPS provider is [buyvm](http://buyvm.net/).  I have an OpenVZ\r\n128m plan with them hosted in New Jersey (running Debian 7).  So, the\r\nvenet0 references that you will see pertain to that VPS provider.\r\n\r\n##Disclaimer##\r\nThis information is provided as is without warranty of any kind,\r\neither express or implied, including but not limited to the implied\r\nwarranties of merchantability and fitness for a particular purpose.\r\nIn no event shall the author be liable for any damages whatsoever\r\nincluding direct, indirect, incidental consequential, loss of\r\nbusiness profits, or special damages.\r\n\r\nIf you leave your DNS server or HTTPS-SNI-Proxy server wide open to\r\nabuse, that's on your own head.  Take precautions in this regard.\r\nProceed at your own risk.\r\n\r\nAlso this is not meant to be a hold-your-hand start from scratch\r\ntutorial.  Therefore, some level of Linux expertise is necessary.\r\n\r\n##Background##\r\nBasically we are interested in proxying content only for certain\r\ndomains.  The actual streaming media sits on CDN networks and is\r\nusually not geo-locked.  The amount of proxying we'll end up doing\r\nwill be relatively insignificant compared to a VPN-based setup.\r\n\r\n[![How Tunlr Cloning works](https://raw.github.com/corporate-gadfly/Tunlr-Clone/master/tunlr-clone.png)](https://raw.github.com/corporate-gadfly/Tunlr-Clone/master/tunlr-clone.png)\r\n\r\nUser browses to Hulu homepage. Behind the scenes, this triggers the\r\nfollowing sequence of events:\r\n\r\n1. Browsing device asks for the IP address of www.hulu.com (using DNS).\r\n1. Since the router is running `dnsmasq`, it selectively sends the DNS\r\n   query for www.hulu.com to DNS server running on the VPS.\r\n1. The VPS DNS server responds with the IP address of VPS SNI Server as the\r\n   authorative answer for the DNS query.\r\n1. Router sends resolved IP address back to browsing device.\r\n1. Browsing device sends a request for content for www.hulu.com.\r\n1. VPS SNI Server sends a request for content to www.hulu.com.\r\n1. Since the VPS SNI Server has an IP presence in USA, www.hulu.com\r\n   responds with proper content.\r\n1. VPS SNI Server proxies the content back to the browsing device\r\n\r\n##Tomato based router##\r\nSince you will be changing DNS servers to point to your \"own\" DNS,\r\nit makes sense to run `dnsmasq` on your router, so that only relevant\r\nDNS queries make it your DNS server and the vast majority of the\r\nremaining DNS queries go to your regular ISP DNS.  Therefore having\r\na Tomato capable router is preferable (as Tomato has `dnsmasq`\r\ncapabilities).\r\n\r\nFollowing is my `dnsmasq` configuration on my Tomato-based router\r\n(running a Toastman build):\r\n`Advanced -> DHCP/DNS -> Dnsmasq Custom configuration`\r\n```bash\r\n# Never forward plain names (without a dot or domain part)\r\ndomain-needed\r\n# Never forward addresses in the non-routed address spaces.\r\nbogus-priv\r\n\r\n# If you don't want dnsmasq to read /etc/resolv.conf or any other\r\n# file, getting its servers from this file instead (see below), then\r\n# uncomment this.\r\nno-resolv\r\n\r\n# If you don't want dnsmasq to poll /etc/resolv.conf or other resolv\r\n# files for changes and re-read them then uncomment this.\r\nno-poll\r\n\r\n# tunlr for hulu\r\nserver=/hulu.com/199.x.x.x\r\nserver=/huluim.com/199.x.x.x\r\nserver=/netflix.com/199.x.x.x\r\n# tunlr for US networks\r\n# cbs works with link.theplatform.com\r\nserver=/abc.com/abc.go.com/199.x.x.x\r\nserver=/fox.com/link.theplatform.com/199.x.x.x\r\nserver=/nbc.com/nbcuni.com/199.x.x.x\r\nserver=/pandora.com/199.x.x.x\r\nserver=/ip2location.com/199.x.x.x\r\n# espn3 \r\nserver=/broadband.espn.go.com/199.x.x.x\r\n\r\n# Google\r\nserver=8.8.8.8\r\nserver=8.8.4.4\r\n# OpenDNS\r\n#server=208.67.222.222\r\n#server=208.67.220.220\r\n```\r\n`199.x.x.x` is the IP address of my VPS server (where my DNS server will\r\nalso be running). See next section.\r\n\r\nIn essence, I am forwarding DNS queries to my VPS only for the\r\nspecified domains.  Everything else goes to Google DNS (or can\r\neasily go to your ISP DNS).\r\n\r\n##Your own DNS Server##\r\nI am running bind9 on my VPS to override the DNS resolution for the\r\nentire domains mentioned in the Tomato-based router configuration\r\nabove.  The plan is to send the external IP address of my VPS as\r\nthe resolved IP address for any of those domains.\r\n\r\nOnce the web traffic hits my VPS, I use iptables to limit access to\r\ntraffic provided by\r\n[HTTPS-SNI-Proxy](https://github.com/dlundquist/HTTPS-SNI-Proxy)\r\nrunning on port 80/443 (since currently HTTPS-SNI-Proxy does not have ACL\r\ncapability).\r\n\r\nHere is the bind9 config:\r\n\r\n`/etc/bind/named.conf.options`\r\n```nginx\r\noptions {\r\n    directory \"/var/cache/bind\";\r\n\tforwarders {\r\n        # these are the DNS servers from the VPS provider (look in /etc/resolv.conf if yours are different)\r\n\t\t199.195.255.68;\r\n\t\t199.195.255.69;\r\n\t};\r\n\r\n\tauth-nxdomain no;    # conform to RFC1035\r\n\tlisten-on-v6 { any; };\r\n\tallow-query { trusted; };\r\n\tallow-recursion { trusted; };\r\n\trecursion yes;\r\n\tdnssec-enable no;\r\n\tdnssec-validation no;\r\n};\r\n```\r\n`/etc/bind/named.conf.local`\r\n```nginx\r\n//\r\n// Do any local configuration here\r\n//\r\n\r\n// Consider adding the 1918 zones here, if they are not used in your\r\n// organization\r\n//include \"/etc/bind/zones.rfc1918\";\r\n\r\ninclude \"/etc/bind/rndc.key\";\r\n\r\nacl \"trusted\" {\r\n    172.y.y.y;        // local venet0:17 internal IP here\r\n    127.0.0.1;\r\n    173.z.z.z;        // Your ISP IP here (cable/DSL)\r\n};\r\n\r\ninclude \"/etc/bind/zones.override\";\r\n\r\nlogging {\r\n    channel bind_log {\r\n        file \"/var/log/named/named.log\" versions 5 size 30m;\r\n        severity info;\r\n        print-time yes;\r\n        print-severity yes;\r\n        print-category yes;\r\n    };\r\n    category default { bind_log; };\r\n    category queries { bind_log; };\r\n};\r\n```\r\n`/etc/bind/zones.override`\r\n```nginx\r\nzone \"hulu.com.\" {\r\n    type master;\r\n    file \"/etc/bind/db.override\";\r\n};\r\nzone \"huluim.com.\" {\r\n    type master;\r\n    file \"/etc/bind/db.override\";\r\n};\r\nzone \"netflix.com.\" {\r\n    type master;\r\n    file \"/etc/bind/db.override\";\r\n};\r\nzone \"abc.com.\" {\r\n    type master;\r\n    file \"/etc/bind/db.override\";\r\n};\r\nzone \"abc.go.com.\" {\r\n    type master;\r\n    file \"/etc/bind/db.override\";\r\n};\r\nzone \"fox.com.\" {\r\n    type master;\r\n    file \"/etc/bind/db.override\";\r\n};\r\nzone \"link.theplatform.com.\" {\r\n    type master;\r\n    file \"/etc/bind/db.override\";\r\n};\r\nzone \"nbc.com.\" {\r\n    type master;\r\n    file \"/etc/bind/db.override\";\r\n};\r\nzone \"nbcuni.com.\" {\r\n    type master;\r\n    file \"/etc/bind/db.override\";\r\n};\r\nzone \"pandora.com.\" {\r\n    type master;\r\n    file \"/etc/bind/db.override\";\r\n};\r\nzone \"broadband.espn.go.com.\" {\r\n    type master;\r\n    file \"/etc/bind/db.override\";\r\n};\r\nzone \"ip2location.com.\" {\r\n    type master;\r\n    file \"/etc/bind/db.override\";\r\n};\r\n```\r\n`/etc/bind/db.override`\r\n```\r\n;\r\n; BIND data file for overridden IPs\r\n;\r\n$TTL  86400\r\n@   IN  SOA ns1 root (\r\n            2012100401  ; serial\r\n            604800      ; refresh 1w\r\n            86400       ; retry 1d\r\n            2419200     ; expiry 4w\r\n            86400       ; minimum TTL 1d\r\n            )\r\n\r\n; need atleast a nameserver\r\n    IN  NS  ns1\r\n; specify nameserver IP address\r\nns1 IN  A   199.x.x.x                ; external IP from venet0:0\r\n; provide IP address for domain itself\r\n@   IN  A   199.x.x.x                ; external IP from venet0:0\r\n; resolve everything with the same IP address as ns1\r\n*   IN  A   199.x.x.x                 ; external IP from venet0:0\r\n```\r\nWhen you discover a new domain that you want to \"master\", simply\r\nadd it to the `zones.override` file and restart bind9.\r\n\r\n##HTTPS-SNI-Proxy##\r\nInstall according to the instructions on\r\n[HTTPS-SNI-Proxy](https://github.com/dlundquist/HTTPS-SNI-Proxy)\r\n\r\n`/etc/sniproxy.conf`\r\n```sniproxy.conf\r\n# grep '^[^#]' /etc/sniproxy.conf\r\nuser daemon\r\npidfile /var/tmp/sniproxy.pid\r\nlistener 172.y.y.y 80 {\r\n    proto http\r\n}\r\nlistener 172.y.y.y 443 {\r\n    proto tls\r\n}\r\ntable {\r\n    (hulu|huluim)\\.com *\r\n    abc\\.(go\\.)?com *\r\n    (nbc|nbcuni)\\.com *\r\n    netflix\\.com *\r\n    ip2location\\.com *\r\n}\r\n```\r\n##Iptables##\r\n`172.y.y.y` is the venet0:17 internal IP address. `173.x.x.x` is your ISP\r\naddress provided by Cable or DSL.\r\n\r\nFor the `filter` table (which is the default):\r\n```bash\r\niptables -A INPUT -i venet0 -s 173.x.x.x -d 172.y.y.y -p tcp -m tcp --dport 80 -j ACCEPT\r\niptables -A INPUT -i venet0 -s 173.x.x.x -d 172.y.y.y -p tcp -m tcp --dport 443 -j ACCEPT\r\n```\r\nFor the `nat` table:\r\n```bash\r\niptables -t nat -A PREROUTING -i venet0 -p tcp --dport 80 -j DNAT --to 172.y.y.y\r\niptables -t nat -A PREROUTING -i venet0 -p tcp --dport 443 -j DNAT --to 172.y.y.y\r\n```\r\n\r\n##Limitations##\r\nAt the time of writing, this procedure does not work in at least the following situations:\r\n\r\n1. Any devices which do not support the use of SNI (Server Name Indication) during SSL 3.0 handshake, e.g.:\r\n    1. Netflix on Chromecast, PlayStation, XBox, Nexus 7 FHD, some LG smart TVs, etc.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}